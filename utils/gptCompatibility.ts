export async function fetchCompatibilityResult(people: {
    name: string;
    birth: string;
    time: string;
    place: string;
    gender: string;
    relation: string[];
  }[]) {
    const relationType = people[0]?.relation[0] || '관계 미지정'

    let prompt = `
당신은 사주 궁합 풀이 철학관의 주인입니다. 당신의 말투는 냉정하고 날카롭습니다. 아무리 아픈 말이라도 사실이면 그대로 말해줍니다. 사탕발림은 금지입니다. 듣는 사람이 정신이 번쩍 들 수 있도록 직설적이고 실용적으로 해석해 주세요.

아래는 두 사람의 사주 및 관계 정보입니다:

${people.map((p, i) =>
  `사람 ${i + 1} (${p.name}님): 성별 ${p.gender}, 생년월일 ${p.birth}, 출생시간 ${p.time}, 출생지 ${p.place}, 관계 유형: ${p.relation.join(', ') || '정보 없음'}`
).join('\n')}

이 정보를 바탕으로, 특히 성별과 관계 유형(${relationType})에 따른 해석 차이를 고려해 사주학적으로 궁합을 분석해 주세요.
오행, 십성, 지지, 천간 등 사주학적 관점을 토대로 현실감 있게 설명하되, 어려운 용어는 쓰지 말고 쉽게 풀어 주세요.

사람들이 실제로 궁금해할 만한 질문에 대해 대답하듯 현실적이고 실용적인 해석을 해 주세요.
`

    let titles: string[] = []

    if (relationType === '연인') {
      prompt += `
아래 여섯 가지 항목에 대해 반드시 '제목: 내용' 형태로 출력해 주세요. 각 항목의 제목은 반드시 한 줄로 명확히 시작하고, 내용은 단순 요약이 아닌 충분한 길이와 밀도로 정성스럽게 분석해 주세요.

1. 기본 성향 궁합: 두 사람의 성격이 어떻게 어울리는지 분석해 주세요.
2. 감정 표현 방식: 서로의 감정 스타일이 어떻게 다르고 어떤 점이 맞는지 설명해 주세요.
3. 연애 스타일과 주도권: 관계에서 누가 감정적으로 주도하는지, 연애 방식은 어떻게 다른지 비교해 주세요.
4. 장기적 관계 유지 가능성: 오래 만났을 때 겪을 수 있는 갈등, 반복되는 패턴이 있다면 알려주세요.
5. 결혼 운과 현실성: 결혼했을 때 경제적/정서적으로 어떤 구조가 될지, 위험 요소가 있다면 솔직히 지적해 주세요.
6. 현실적인 총평과 조언: 둘의 관계를 유지하거나 마무리할 때 어떤 태도가 필요한지 직설적으로 조언해 주세요.

각 항목은 반드시 아래 형식을 지켜서 출력해 주세요:

[제목]
내용은 반드시 다음 줄부터 시작하며, 제목은 내용 안에 절대 반복하지 마세요.
`
      titles = ['기본 성향 궁합', '감정 표현 방식', '연애 스타일과 주도권', '장기적 관계 유지 가능성', '결혼 운과 현실성', '현실적인 총평과 조언']
    } else if (relationType === '친구') {
      prompt += `
아래 항목에 대해 각각 제목과 함께 실용적으로 분석해 주세요.

1. 성격 조합과 대화 코드: 둘은 서로 대화가 통하는 성향인지, 말이 잘 통하는지
2. 갈등 유형: 친구 관계에서 자주 발생할 수 있는 갈등과 감정 기복
3. 우정의 지속 가능성: 멀어지거나 자주 싸우는 이유가 있다면 짚어 주세요
4. 함께 있을 때 서로에게 주는 영향: 긍정적/부정적 에너지, 자극 또는 방해 요소
5. 삶의 방향성과 궁합: 인생관이나 성향 차이가 클 경우 조심해야 할 점
6. 한 마디 조언: 친구 관계로서 어떻게 유지하면 좋은지 핵심만 짚어 주세요

각 항목은 반드시 아래 형식을 지켜서 출력해 주세요:

[제목]
내용은 반드시 다음 줄부터 시작하며, 제목은 내용 안에 절대 반복하지 마세요.
`
      titles = ['성격 조합과 대화 코드', '갈등 유형', '우정의 지속성', '함께 있을 때 서로에게 주는 영향', '삶의 방향성과 궁합', '한 마디 조언']
    } else {
      prompt += `
아래 항목에 대해 현실적이고 명확하게 해석해 주세요.

1. 기본 성향 궁합
2. 관계 내 스트레스 요인
3. 커뮤니케이션 방식의 차이
4. 신뢰/의존의 균형
5. 함께할 때 기대되는 성장성
6. 관계 유지에 필요한 조언

각 항목은 반드시 아래 형식을 지켜서 출력해 주세요:

[제목]
내용은 반드시 다음 줄부터 시작하며, 제목은 내용 안에 절대 반복하지 마세요.
`
      titles = ['기본 성향 궁합', '관계 내 스트레스 요인', '커뮤니케이션 방식의 차이', '신뢰/의존의 균형', '함께할 때 기대되는 성장성', '관계 유지에 필요한 조언']
    }
  
    const res = await fetch('/api/gpt', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt }),
    })

    if (res.status === 429) {
      return '❗ 너무 빠르게 요청했어요. 잠시 후 다시 시도해 주세요.'
    }
  
    const data = await res.json()
  
    console.log('📦 GPT 응답 원본:', JSON.stringify(data, null, 2)) // 🔍 로그 찍기
  
    const raw = data?.choices?.[0]?.message?.content
  
    if (!raw) {
      console.warn('❗ GPT 응답 없음')
      return [{ title: '에러', content: 'GPT 응답을 받아오지 못했습니다.' }]
    }
  
    const parsed = raw.match(/\[([^\]]+)\]\s*([\s\S]*?)(?=\n\[|$)/g)

    const cards = parsed?.map((block) => {
      const match = block.match(/\[([^\]]+)\]\s*([\s\S]*)/)
      return {
        title: match?.[1]?.trim() || '제목 없음',
        content: match?.[2]?.trim() || '내용 없음',
      }
    }) || []

    return cards.map((c, i) => `\n${i + 1}. ${c.title}: ${c.content}`).join('\n\n')
  }